#include "newAgent.h"int hdr_newAgent::offset_;static class NewAgentHeaderClass : public PacketHeaderClass {public:	NewAgentHeaderClass() : PacketHeaderClass("PacketHeader/NewAgent", 	sizeof(hdr_newAgent)) {		bind_offset(&hdr_newAgent::offset_);	}} class_NewAgenthdr;static class NewAgentClass : public TclClass {public:	NewAgentClass() : TclClass("Agent/NewAgent") {}	TclObject* create(int, const char*const*) {	return (new NewAgent());	}} class_NewAgent;NewAgent::NewAgent() : Agent(PT_NEWAGENT), seq(0){}int NewAgent::command(int argc, const char*const* argv){	if (argc == 2) 	{		if (strcmp(argv[1], "send") == 0) 		{			// Create a new packet			Packet* pkt = allocpkt();			// Access the header for the new packet			hdr_newAgent* hdr = hdr_newAgent::access(pkt);			hdr->ret = 0;			hdr->seq = seq++;			hdr->pNode = 0;			hdr->nNode = 1;			hdr->length=length;			int i=0;			while(i<(hdr->length))			{				int len;				len=strlen(path[i]);				memcpy(hdr->path[i],path[i],len);				hdr->path[i][len]='\0'; 				i++;			}			target_ = (NsObject*)TclObject::lookup(hdr->path[1]);			send(pkt, 0);			return (TCL_OK);		}		else		{			return (TCL_OK);		}	}	if ((argc > 2)&&(strcmp(argv[1], "addpath")==0))	{		int i=0;		length=argc-2;		 while(i<length)		{			int len;			len=strlen(argv[i+2]);			memcpy(path[i],argv[i+2],len);			path[i][len]='\0';			i++;		}		printf("Path:");		 for(int j=0;j<4;j++)		printf("%s ",path[j]); 		printf("\n");		return (TCL_OK);			}	return (Agent::command(argc, argv));}void NewAgent::recv(Packet* pkt, Handler*){	// Access the IP header for the received packet:	hdr_ip* hdrip = hdr_ip::access(pkt);	// Access the header for the received packet:	hdr_newAgent* hdr = hdr_newAgent::access(pkt);	if (hdr->ret == 0) 	{		(hdr->pNode)++;		(hdr->nNode)++;		if((hdr->nNode)<(hdr->length))		{			printf("Now through:%s ",hdr->path[hdr->pNode]);			target_ = (NsObject*)TclObject::lookup(hdr->path[hdr->nNode]);			send(pkt, 0);		}		else		{			printf("reach %s ,",hdr->path[hdr->pNode]);			printf("recv packet serial number:%d\n",hdr->seq);						Packet::free(pkt);		}	}}